{"AudioVisual": {"_docstring": null, "__init__": [["self", "url", "uuid", "timestamp", "apikey", "security"], [null, null], "AudioVisual instances provide a bridge between transform and filelinks, and allow\nyou to check the status of a conversion and convert to a Filelink once completed\n\n```python\nfrom filestack import Client\n\nclient = Client(\"<API_KEY>\")\nfilelink = client.upload(filepath='path/to/file/doom.mp4')\nav_convert= filelink.av_convert(width=100, height=100)\nwhile av_convert.status != 'completed':\n    print(av_convert.status)\n\nfilelink = av_convert.to_filelink()\nprint(filelink.url)\n```"], "to_filelink": [["self"], null, "Checks is the status of the conversion is complete and, if so, converts to a Filelink\n\n*returns* [Filestack.Filelink]\n\n```python\nfilelink = av_convert.to_filelink()\n```"], "attributes": [["status", "Returns the status of the AV conversion (makes a GET request)\n\n*returns* [String]\n\n```python\nav_convert= filelink.av_convert(width=100, height=100)\nwhile av_convert.status != 'completed':\n    print(av_convert.status)\n```"], ["url", null], ["apikey", "Returns the handle associated with the instance (if any)\n\n*returns* [String]\n\n```python\nav.handle\n# YOUR_HANDLE\n```"], ["security", "Returns the security object associated with the instance (if any)\n\n*returns* [Dict]\n\n```python\nav.security\n# {'policy': 'YOUR_ENCODED_POLICY', 'signature': 'YOUR_ENCODED_SIGNATURE'}\n```"], ["uuid", null], ["timestamp", null]]}, "Client": {"_docstring": "The hub for all Filestack operations. Creates Filelinks, converts external to transform objects, takes a URL screenshot and \nreturns zipped files. ", "__init__": [["self", "apikey", "security", "storage"], [null, "S3"], "Initialize self.  See help(type(self)) for accurate signature."], "transform_external": [["self", "external_url"], null, "Turns an external URL into a Filestack Transform object\n\n*returns* [Filestack.Transform]\n\n```python\nfrom filestack import Client, Filelink\n\nclient = Client(\"API_KEY\")    \ntransform = client.transform_external('http://www.example.com')\n```"], "upload": [["self", "url", "filepath", "multipart", "params", "upload_processes", "intelligent"], [null, null, true, null, null, false], "Uploads a file either through a local filepath or external_url. Uses multipart by default and Intelligent Ingestion by default (if enabled). You can specify the\nnumber of multipart processes and pass in parameters.\n\nreturns [Filestack.Filelink]\n```python\nfrom filestack import Client\n\nclient = Client(\"<API_KEY>\")\nfilelink = client.upload(filepath='/path/to/file')\n\n# to use different storage:\nclient = FilestackClient.new('API_KEY', storage='dropbox')\nfilelink = client.upload(filepath='/path/to/file', params={'container': 'my-container'})\n\n# to use an external URL:\nfilelink = client.upload(external_url='https://www.example.com')\n\n# to disable intelligent ingestion:\nfilelink = client.upload(filepath='/path/to/file', intelligent=False)\n```"], "urlscreenshot": [["self", "external_url", "agent", "mode", "width", "height", "delay"], [null, null, null, null, null], "Takes a 'screenshot' of the given URL \n\n*returns* [Filestack.Transform]\n\n```python\nfrom filestack import Client\n\nclient = Client(\"API_KEY\")\n# returns a Transform object\nscreenshot = client.url_screenshot('https://www.example.com', width=100, height=100, agent=\"desktop\")\nfilelink = screenshot.store()\n````"], "zip": [["self", "destination_path", "files"], null, "Takes array of files and downloads a compressed ZIP archive\nto provided path\n\n*returns* [requests.response]\n\n```python\nfrom filestack import Client\n\nclient = Client(\"<API_KEY>\")\nclient.zip('/path/to/file/destination', ['files'])\n```"], "attributes": [["security", "Returns the security object associated with the instance (if any)\n\n*returns* [Dict]\n\n```python\nclient.security\n# {'policy': 'YOUR_ENCODED_POLICY', 'signature': 'YOUR_ENCODED_SIGNATURE'}\n```"], ["storage", "Returns the storage associated with the client (defaults to 'S3')\n\n*returns* [Dict]\n\n```python\nclient.storage\n# S3\n```"], ["apikey", "Returns the API key associated with the instance\n\n*returns* [String]\n\n```python\nclient.apikey\n# YOUR_API_KEY\n```"]]}, "CommonMixin": {"_docstring": "Contains all functions related to the manipulation of Filelinks", "delete": [["self", "params"], [null], "You may delete any file you have uploaded, either through a Filelink returned from the client or one you have initialized yourself. \nThis returns a response of success or failure. This action requires security.abs\n\n*returns* [requests.response]\n\n```python\nfrom filestack import Client, security\n\n# a policy requires at least an expiry\npolicy = {'expiry': 56589012}\nsec = security(policy, 'APP_SECRET')\n\nclient =  Client('API_KEY', security=sec)\nfilelink = client.upload(filepath='/path/to/file/foo.txt')\nresponse = filelink.delete()\n```"], "download": [["self", "destination_path", "params"], [null], "Downloads a file to the given local path and returns the size of the downloaded file if successful\n\n*returns* [Integer]\n\n```python\nfrom filestack import Client\n\nclient =  Client('API_KEY', security=sec)\nfilelink = client.upload(filepath='/path/to/file')\n# if successful, returns size of downloaded file in bytes\nresponse = filelink.download('path/to/file')\n```"], "get_content": [["self", "params"], [null], "Returns the raw byte content of a given Filelink\n\n*returns* [Bytes]\n```python\nfrom filestack import Client\n\nclient =  Client('API_KEY')\nfilelink = client.upload(filepath='/path/to/file/foo.jpg')\nbyte_content = filelink.get_content()\n```"], "get_metadata": [["self", "params"], [null], "Metadata provides certain information about a Filehandle, and you can specify which pieces \nof information you will receive back by passing in optional parameters. \n\n```python\nfrom filestack import Client\n\nclient =  Client('API_KEY')\nfilelink = client.upload(filepath='/path/to/file/foo.jpg')\nmetadata = filelink.get_metadata()\n# or define specific metadata to receive\nmetadata = filelink.get_metadata({'filename': true})\n```"], "overwrite": [["self", "url", "filepath", "params"], [null, null, null], "You may overwrite any Filelink by supplying a new file. The Filehandle will remain the same.\n\n*returns* [requests.response]\n\n```python\nfrom filestack import Client, security\n\n# a policy requires at least an expiry\npolicy = {'expiry': 56589012}\nsec = security(policy, 'APP_SECRET')\n\nclient =  Client('API_KEY', security=sec)\n```"], "attributes": []}, "Filelink": {"_docstring": "Filelinks are object representations of Filestack Filehandles. You can perform all actions that is allowed through our REST API,\nincluding downloading, deleting, overwriting and retrieving metadata. You can also get image tags, SFW filters, and directly\ncall any of our available transformations.", "__init__": [["self", "handle", "apikey", "security"], [null, null], "Initialize self.  See help(type(self)) for accurate signature."], "_return_tag_task": [["self", "task"], null, "Runs both SFW and Tags tasks"], "add_transform_task": [["self", "transformation", "params"], null, "Adds a transform task to the current instance and returns it\n\n*returns* Filestack.Transform"], "ascii": [["self", "background", "foreground", "colored", "size", "reverse"], [null, null, null, null, null], null], "av_convert": [["self", "preset", "force", "title", "extname", "filename", "width", "height", "upscale", "aspect_mode", "two_pass", "video_bitrate", "fps", "keyframe_interval", "location", "watermark_url", "watermark_top", "watermark_bottom", "watermark_right", "watermark_left", "watermark_width", "watermark_height", "path", "access", "container", "audio_bitrate", "audio_sample_rate", "audio_channels", "clip_length", "clip_offset"], [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "```python\nfrom filestack import Client\n\nclient = Client(\"<API_KEY>\")\nfilelink = client.upload(filepath='path/to/file/doom.mp4')\nav_convert= filelink.av_convert(width=100, height=100)\nwhile av_convert.status != 'completed':\n    print(av_convert.status)\n\nfilelink = av_convert.to_filelink()\nprint(filelink.url)\n```"], "blackwhite": [["self", "threshold"], [null], null], "blur": [["self", "amount"], [null], null], "border": [["self", "width", "color", "background"], [null, null, null], null], "circle": [["self", "background"], [null], null], "collage": [["self", "files", "margin", "width", "height", "color", "fit", "autorotate"], [null, null, null, null, null, null, null], null], "crop": [["self", "dim"], [null], null], "crop_faces": [["self", "mode", "width", "height", "faces", "buffer"], [null, null, null, null, null], null], "delete": [["self", "params"], [null], "You may delete any file you have uploaded, either through a Filelink returned from the client or one you have initialized yourself. \nThis returns a response of success or failure. This action requires security.abs\n\n*returns* [requests.response]\n\n```python\nfrom filestack import Client, security\n\n# a policy requires at least an expiry\npolicy = {'expiry': 56589012}\nsec = security(policy, 'APP_SECRET')\n\nclient =  Client('API_KEY', security=sec)\nfilelink = client.upload(filepath='/path/to/file/foo.txt')\nresponse = filelink.delete()\n```"], "detect_faces": [["self", "minsize", "maxsize", "color", "export"], [null, null, null, null], null], "download": [["self", "destination_path", "params"], [null], "Downloads a file to the given local path and returns the size of the downloaded file if successful\n\n*returns* [Integer]\n\n```python\nfrom filestack import Client\n\nclient =  Client('API_KEY', security=sec)\nfilelink = client.upload(filepath='/path/to/file')\n# if successful, returns size of downloaded file in bytes\nresponse = filelink.download('path/to/file')\n```"], "enhance": [["self"], null, null], "filetype_conversion": [["self", "format", "background", "page", "density", "compress", "quality", "strip", "colorspace", "secure", "docinfo", "pageformat", "pageorientation"], [null, null, null, null, null, null, null, null, null, null, null, null], null], "flip": [["self"], null, null], "flop": [["self"], null, null], "get_content": [["self", "params"], [null], "Returns the raw byte content of a given Filelink\n\n*returns* [Bytes]\n```python\nfrom filestack import Client\n\nclient =  Client('API_KEY')\nfilelink = client.upload(filepath='/path/to/file/foo.jpg')\nbyte_content = filelink.get_content()\n```"], "get_metadata": [["self", "params"], [null], "Metadata provides certain information about a Filehandle, and you can specify which pieces \nof information you will receive back by passing in optional parameters. \n\n```python\nfrom filestack import Client\n\nclient =  Client('API_KEY')\nfilelink = client.upload(filepath='/path/to/file/foo.jpg')\nmetadata = filelink.get_metadata()\n# or define specific metadata to receive\nmetadata = filelink.get_metadata({'filename': true})\n```"], "modulate": [["self", "brightness", "hue", "saturation"], [null, null, null], null], "monochrome": [["self"], null, null], "negative": [["self"], null, null], "no_metadata": [["self"], null, null], "oil_paint": [["self", "amount"], [null], null], "overwrite": [["self", "url", "filepath", "params"], [null, null, null], "You may overwrite any Filelink by supplying a new file. The Filehandle will remain the same.\n\n*returns* [requests.response]\n\n```python\nfrom filestack import Client, security\n\n# a policy requires at least an expiry\npolicy = {'expiry': 56589012}\nsec = security(policy, 'APP_SECRET')\n\nclient =  Client('API_KEY', security=sec)\n```"], "partial_blur": [["self", "amount", "blur", "type", "objects"], [null, null, null, null], null], "partial_pixelate": [["self", "amount", "blur", "type", "objects"], [null, null, null, null], null], "pixelate": [["self", "amount"], [null], null], "pixelate_faces": [["self", "faces", "minsize", "maxsize", "buffer", "amount", "blur", "type"], [null, null, null, null, null, null, null], null], "polaroid": [["self", "color", "rotate", "background"], [null, null, null], null], "quality": [["self", "value"], [null], null], "redeye": [["self"], null, null], "resize": [["self", "width", "height", "fit", "align"], [null, null, null, null], null], "rotate": [["self", "deg", "exif", "background"], [null, null, null], null], "round_corners": [["self", "radius", "blur", "background"], [null, null, null], null], "sepia": [["self", "tone"], [null], null], "sfw": [["self"], null, "Get SFW label for the given file. \n\n*returns* [Boolean]\n\n```python\nfrom filestack import Client\n\nclient = Client(\"<API_KEY>\")\nfilelink = client.upload(filepath='/path/to/file/foo.jpg')\n# returns true if SFW and false if not\nsfw = filelink.sfw()\n```"], "shadow": [["self", "blur", "opacity", "vector", "color", "background"], [null, null, null, null, null], null], "sharpen": [["self", "amount"], [null], null], "tags": [["self"], null, "Get Google Vision tags for the Filelink. \n\n*returns* [Dict]\n\n```python\nfrom filestack import Client\n\nclient = Client(\"<API_KEY>\")\nfilelink = client.upload(filepath='/path/to/file/foo.jpg')\ntags = filelink.tags()\n```"], "torn_edges": [["self", "spread", "background"], [null, null], null], "upscale": [["self", "upscale", "noise", "style"], [null, null, null], null], "vignette": [["self", "amount", "blurmode", "background"], [null, null, null], null], "watermark": [["self", "file", "size", "position"], [null, null, null], null], "zip": [["self", "store", "store_params"], [false, null], "Returns a zip file of the current transformation. This is different from\nthe zip function that lives on the Filestack Client\n\n*returns* [Filestack.Transform]"], "attributes": [["handle", "Returns the handle associated with the instance (if any)\n\n*returns* [String]\n\n```python\nfilelink.handle\n# YOUR_HANDLE\n```"], ["url", "Returns the URL for the instance, which can be used\nto retrieve, delete, and overwrite the file. If security is enabled, signature and policy parameters will\nbe included,\n\n*returns* [String]\n\n```python\nfilelink = client.upload(filepath='/path/to/file')\nfilelink.url\n# https://cdn.filestackcontent.com/FILE_HANDLE\n```"], ["security", "Returns the security object associated with the instance (if any)\n\n*returns* [Dict]\n\n```python\nfilelink.security\n# {'policy': 'YOUR_ENCODED_POLICY', 'signature': 'YOUR_ENCODED_SIGNATURE'}\n```"], ["apikey", "Returns the API key associated with the instance\n\n*returns* [String]\n\n```python\nfilelink.apikey\n# YOUR_API_KEY\n```"]]}, "ImageTransformationMixin": {"_docstring": "All transformations and related/dependent tasks live here. They can \nbe directly called by Transform or Filelink objects.", "add_transform_task": [["self", "transformation", "params"], null, "Adds a transform task to the current instance and returns it\n\n*returns* Filestack.Transform"], "ascii": [["self", "background", "foreground", "colored", "size", "reverse"], [null, null, null, null, null], null], "av_convert": [["self", "preset", "force", "title", "extname", "filename", "width", "height", "upscale", "aspect_mode", "two_pass", "video_bitrate", "fps", "keyframe_interval", "location", "watermark_url", "watermark_top", "watermark_bottom", "watermark_right", "watermark_left", "watermark_width", "watermark_height", "path", "access", "container", "audio_bitrate", "audio_sample_rate", "audio_channels", "clip_length", "clip_offset"], [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "```python\nfrom filestack import Client\n\nclient = Client(\"<API_KEY>\")\nfilelink = client.upload(filepath='path/to/file/doom.mp4')\nav_convert= filelink.av_convert(width=100, height=100)\nwhile av_convert.status != 'completed':\n    print(av_convert.status)\n\nfilelink = av_convert.to_filelink()\nprint(filelink.url)\n```"], "blackwhite": [["self", "threshold"], [null], null], "blur": [["self", "amount"], [null], null], "border": [["self", "width", "color", "background"], [null, null, null], null], "circle": [["self", "background"], [null], null], "collage": [["self", "files", "margin", "width", "height", "color", "fit", "autorotate"], [null, null, null, null, null, null, null], null], "crop": [["self", "dim"], [null], null], "crop_faces": [["self", "mode", "width", "height", "faces", "buffer"], [null, null, null, null, null], null], "detect_faces": [["self", "minsize", "maxsize", "color", "export"], [null, null, null, null], null], "enhance": [["self"], null, null], "filetype_conversion": [["self", "format", "background", "page", "density", "compress", "quality", "strip", "colorspace", "secure", "docinfo", "pageformat", "pageorientation"], [null, null, null, null, null, null, null, null, null, null, null, null], null], "flip": [["self"], null, null], "flop": [["self"], null, null], "modulate": [["self", "brightness", "hue", "saturation"], [null, null, null], null], "monochrome": [["self"], null, null], "negative": [["self"], null, null], "no_metadata": [["self"], null, null], "oil_paint": [["self", "amount"], [null], null], "partial_blur": [["self", "amount", "blur", "type", "objects"], [null, null, null, null], null], "partial_pixelate": [["self", "amount", "blur", "type", "objects"], [null, null, null, null], null], "pixelate": [["self", "amount"], [null], null], "pixelate_faces": [["self", "faces", "minsize", "maxsize", "buffer", "amount", "blur", "type"], [null, null, null, null, null, null, null], null], "polaroid": [["self", "color", "rotate", "background"], [null, null, null], null], "quality": [["self", "value"], [null], null], "redeye": [["self"], null, null], "resize": [["self", "width", "height", "fit", "align"], [null, null, null, null], null], "rotate": [["self", "deg", "exif", "background"], [null, null, null], null], "round_corners": [["self", "radius", "blur", "background"], [null, null, null], null], "sepia": [["self", "tone"], [null], null], "shadow": [["self", "blur", "opacity", "vector", "color", "background"], [null, null, null, null, null], null], "sharpen": [["self", "amount"], [null], null], "torn_edges": [["self", "spread", "background"], [null, null], null], "upscale": [["self", "upscale", "noise", "style"], [null, null, null], null], "vignette": [["self", "amount", "blurmode", "background"], [null, null, null], null], "watermark": [["self", "file", "size", "position"], [null, null, null], null], "zip": [["self", "store", "store_params"], [false, null], "Returns a zip file of the current transformation. This is different from\nthe zip function that lives on the Filestack Client\n\n*returns* [Filestack.Transform]"], "attributes": []}, "Transform": {"_docstring": "Transform objects take either a handle or an external URL. They act similarly to\nFilelinks, but have specific methods like store, debug, and also construct\nURLs differently.\n\nTransform objects can be chained to build up multi-task transform URLs, each one saved in\nself._transformation_tasks", "__init__": [["self", "apikey", "handle", "external_url", "security"], [null, null, null, null], "```python\nfrom filestack import Client\n\nclient = Client(\"<API_KEY>\")\nfilelink = client.upload(filepath='/path/to/file/foo.jpg')\ntransform = filelink.resize(width=100, height=100).rotate(deg=90)\n\nnew_filelink = transform.store()\n```"], "add_transform_task": [["self", "transformation", "params"], null, "Adds a transform task to the current instance and returns it\n\n*returns* Filestack.Transform"], "ascii": [["self", "background", "foreground", "colored", "size", "reverse"], [null, null, null, null, null], null], "av_convert": [["self", "preset", "force", "title", "extname", "filename", "width", "height", "upscale", "aspect_mode", "two_pass", "video_bitrate", "fps", "keyframe_interval", "location", "watermark_url", "watermark_top", "watermark_bottom", "watermark_right", "watermark_left", "watermark_width", "watermark_height", "path", "access", "container", "audio_bitrate", "audio_sample_rate", "audio_channels", "clip_length", "clip_offset"], [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "```python\nfrom filestack import Client\n\nclient = Client(\"<API_KEY>\")\nfilelink = client.upload(filepath='path/to/file/doom.mp4')\nav_convert= filelink.av_convert(width=100, height=100)\nwhile av_convert.status != 'completed':\n    print(av_convert.status)\n\nfilelink = av_convert.to_filelink()\nprint(filelink.url)\n```"], "blackwhite": [["self", "threshold"], [null], null], "blur": [["self", "amount"], [null], null], "border": [["self", "width", "color", "background"], [null, null, null], null], "circle": [["self", "background"], [null], null], "collage": [["self", "files", "margin", "width", "height", "color", "fit", "autorotate"], [null, null, null, null, null, null, null], null], "crop": [["self", "dim"], [null], null], "crop_faces": [["self", "mode", "width", "height", "faces", "buffer"], [null, null, null, null, null], null], "debug": [["self"], null, "Returns a JSON object with inforamtion regarding the current transformation \n\n*returns* [Dict]"], "delete": [["self", "params"], [null], "You may delete any file you have uploaded, either through a Filelink returned from the client or one you have initialized yourself. \nThis returns a response of success or failure. This action requires security.abs\n\n*returns* [requests.response]\n\n```python\nfrom filestack import Client, security\n\n# a policy requires at least an expiry\npolicy = {'expiry': 56589012}\nsec = security(policy, 'APP_SECRET')\n\nclient =  Client('API_KEY', security=sec)\nfilelink = client.upload(filepath='/path/to/file/foo.txt')\nresponse = filelink.delete()\n```"], "detect_faces": [["self", "minsize", "maxsize", "color", "export"], [null, null, null, null], null], "download": [["self", "destination_path", "params"], [null], "Downloads a file to the given local path and returns the size of the downloaded file if successful\n\n*returns* [Integer]\n\n```python\nfrom filestack import Client\n\nclient =  Client('API_KEY', security=sec)\nfilelink = client.upload(filepath='/path/to/file')\n# if successful, returns size of downloaded file in bytes\nresponse = filelink.download('path/to/file')\n```"], "enhance": [["self"], null, null], "filetype_conversion": [["self", "format", "background", "page", "density", "compress", "quality", "strip", "colorspace", "secure", "docinfo", "pageformat", "pageorientation"], [null, null, null, null, null, null, null, null, null, null, null, null], null], "flip": [["self"], null, null], "flop": [["self"], null, null], "get_content": [["self", "params"], [null], "Returns the raw byte content of a given Filelink\n\n*returns* [Bytes]\n```python\nfrom filestack import Client\n\nclient =  Client('API_KEY')\nfilelink = client.upload(filepath='/path/to/file/foo.jpg')\nbyte_content = filelink.get_content()\n```"], "get_metadata": [["self", "params"], [null], "Metadata provides certain information about a Filehandle, and you can specify which pieces \nof information you will receive back by passing in optional parameters. \n\n```python\nfrom filestack import Client\n\nclient =  Client('API_KEY')\nfilelink = client.upload(filepath='/path/to/file/foo.jpg')\nmetadata = filelink.get_metadata()\n# or define specific metadata to receive\nmetadata = filelink.get_metadata({'filename': true})\n```"], "modulate": [["self", "brightness", "hue", "saturation"], [null, null, null], null], "monochrome": [["self"], null, null], "negative": [["self"], null, null], "no_metadata": [["self"], null, null], "oil_paint": [["self", "amount"], [null], null], "overwrite": [["self", "url", "filepath", "params"], [null, null, null], "You may overwrite any Filelink by supplying a new file. The Filehandle will remain the same.\n\n*returns* [requests.response]\n\n```python\nfrom filestack import Client, security\n\n# a policy requires at least an expiry\npolicy = {'expiry': 56589012}\nsec = security(policy, 'APP_SECRET')\n\nclient =  Client('API_KEY', security=sec)\n```"], "partial_blur": [["self", "amount", "blur", "type", "objects"], [null, null, null, null], null], "partial_pixelate": [["self", "amount", "blur", "type", "objects"], [null, null, null, null], null], "pixelate": [["self", "amount"], [null], null], "pixelate_faces": [["self", "faces", "minsize", "maxsize", "buffer", "amount", "blur", "type"], [null, null, null, null, null, null, null], null], "polaroid": [["self", "color", "rotate", "background"], [null, null, null], null], "quality": [["self", "value"], [null], null], "redeye": [["self"], null, null], "resize": [["self", "width", "height", "fit", "align"], [null, null, null, null], null], "rotate": [["self", "deg", "exif", "background"], [null, null, null], null], "round_corners": [["self", "radius", "blur", "background"], [null, null, null], null], "sepia": [["self", "tone"], [null], null], "shadow": [["self", "blur", "opacity", "vector", "color", "background"], [null, null, null, null, null], null], "sharpen": [["self", "amount"], [null], null], "store": [["self", "filename", "location", "path", "container", "region", "access", "base64decode"], [null, null, null, null, null, null, null], "Uploads and stores the current transformation as a Fileink\n\n*returns* [Filestack.Filelink]\n\n```python\nfilelink = transform.store()\n```"], "torn_edges": [["self", "spread", "background"], [null, null], null], "upscale": [["self", "upscale", "noise", "style"], [null, null, null], null], "vignette": [["self", "amount", "blurmode", "background"], [null, null, null], null], "watermark": [["self", "file", "size", "position"], [null, null, null], null], "zip": [["self", "store", "store_params"], [false, null], "Returns a zip file of the current transformation. This is different from\nthe zip function that lives on the Filestack Client\n\n*returns* [Filestack.Transform]"], "attributes": [["handle", "Returns the handle associated with the instance (if any)\n\n*returns* [String]\n\n```python\ntransform.handle\n# YOUR_HANDLE\n```"], ["external_url", "Returns the external URL associated with the instance (if any)\n\n*returns* [String]\n\n```python\ntransform.external_url\n# YOUR_EXTERNAL_URL\n```"], ["apikey", "Returns the API key associated with the instance\n\n*returns* [String]\n\n```python\ntransform.apikey\n# YOUR_API_KEY\n```"], ["security", "Returns the security object associated with the instance (if any)\n\n*returns* [Dict]\n\n```python\ntransform.security\n# {'policy': 'YOUR_ENCODED_POLICY', 'signature': 'YOUR_ENCODED_SIGNATURE'}\n```"], ["url", "Returns the URL for the current transformation, which can be used\nto retrieve the file. If security is enabled, signature and policy parameters will\nbe included\n\n*returns* [String]\n\n```python\ntransform = client.upload(filepath='/path/to/file')\ntransform.url()\n# https://cdn.filestackcontent.com/TRANSFORMS/FILE_HANDLE\n```"]]}, "functions": {"security": [["policy", "app_secret"], null, "Creates a valid signature and policy based on provided app secret and \nparameters\n```python\nfrom filestack import Client, security\n\n# a policy requires at least an expiry\npolicy = {'expiry': 56589012, 'call': ['read', 'store', 'pick']}\nsec = security(policy, 'APP_SECRET')\n\nclient =  Client('API_KEY', security=sec)\n```"]}}